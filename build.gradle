import java.util.regex.Matcher
import java.util.regex.Pattern

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
    parseLocalProperties()
    def currentBuildType = getCurrentBuildType()

    ext {
        buildType = currentBuildType
        startCommands = { commands ->
            return commandStart(commands)
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def parseLocalProperties(){
    File file = rootProject.file('local.properties')
    if(file.exists()) {
        InputStream inputStream = rootProject.file('local.properties').newDataInputStream();
        Properties properties = new Properties()
        properties.load(inputStream)

        if (properties.containsKey("chromium_dir")) {
            ext.chromium_dir = properties.getProperty("chromium_dir")
        }
        if (properties.containsKey("out_dir")) {
            ext.out_dir = properties.getProperty("out_dir")
        }
    }
}

def getCurrentBuildType() {
    String tskReqStr = gradle.startParameter.taskRequests.toString()

    Pattern pattern
    if (tskReqStr.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w*)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w*)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(tskReqStr)
    if (matcher.find()) {
        return matcher.group(matcher.groupCount()).toLowerCase()
    } else {
        println "NO MATCH FOUND"
        return ""
    }
}

boolean commandStart(commands) {
    def isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows")
    if (isWindows) {
        commands << "cmd"
        commands << "/c"
    } else {
        commands << "bash"
        commands << "-c"
    }
    return isWindows
}