apply plugin: 'java-library'

def useHashedJniNames = true // not debug

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.google.auto.service:auto-service:1.0-rc2"
    implementation "com.google.guava:guava:28.1-jre"
    implementation "com.squareup:javapoet:1.11.1"
    implementation "javax.annotation:jsr250-api:1.0"

    annotationProcessor "com.google.auto.service:auto-service:1.0-rc2"
}

sourceCompatibility = "8"
targetCompatibility = "8"

sourceSets {
    main {
        java {
            srcDirs "src/main/java",
                    "$chromium_dir/base/android/jni_generator/java/src",
                    "$chromium_dir/base/android/java/src"
            include "org/chromium/jni_generator/"
            include "org/chromium/base/JniStaticTestMocker.java"
            include "org/chromium/base/annotations/CheckDiscard.java"
            include "org/chromium/base/annotations/MainDex.java"
            include "org/chromium/base/annotations/NativeMethods.java"
        }
    }
}

task generateProcessorArgs {
    doFirst {
        def commands = []
        startCommands(commands)
        def output = "${projectDir.path}/src/main/java/org/chromium/jni_generator/ProcessorArgs.java"
        def source = "$chromium_dir/base/android/jni_generator/ProcessorArgs.template"

        commands << (isWindows ? "wsl gcc" : "gcc")
        commands << "-D" << "HASH_JNI_NAMES_VALUE=$useHashedJniNames"
        commands << "-E"
        commands << "-D" << "ANDROID"
        commands << "-x" << "c-header"
        commands << "-P"
        commands << "-I" << wslPath(chromium_dir)
        commands << "-o" << wslPath(output)
        commands << wslPath(source)

        exec {
            workingDir "$chromium_dir"
            commandLine commands
        }
    }
}

compileJava.dependsOn generateProcessorArgs